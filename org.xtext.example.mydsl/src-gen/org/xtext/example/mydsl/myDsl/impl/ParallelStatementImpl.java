/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.ParallelStatement;
import org.xtext.example.mydsl.myDsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Parallel Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ParallelStatementImpl#getParstatements <em>Parstatements</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.ParallelStatementImpl#getElsestatements <em>Elsestatements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParallelStatementImpl extends StatementImpl implements ParallelStatement
{
  /**
   * The cached value of the '{@link #getParstatements() <em>Parstatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParstatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> parstatements;

  /**
   * The cached value of the '{@link #getElsestatements() <em>Elsestatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElsestatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> elsestatements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParallelStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.PARALLEL_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getParstatements()
  {
    if (parstatements == null)
    {
      parstatements = new EObjectContainmentEList<Statement>(Statement.class, this, MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS);
    }
    return parstatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getElsestatements()
  {
    if (elsestatements == null)
    {
      elsestatements = new EObjectContainmentEList<Statement>(Statement.class, this, MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS);
    }
    return elsestatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS:
        return ((InternalEList<?>)getParstatements()).basicRemove(otherEnd, msgs);
      case MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS:
        return ((InternalEList<?>)getElsestatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS:
        return getParstatements();
      case MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS:
        return getElsestatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS:
        getParstatements().clear();
        getParstatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS:
        getElsestatements().clear();
        getElsestatements().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS:
        getParstatements().clear();
        return;
      case MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS:
        getElsestatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.PARALLEL_STATEMENT__PARSTATEMENTS:
        return parstatements != null && !parstatements.isEmpty();
      case MyDslPackage.PARALLEL_STATEMENT__ELSESTATEMENTS:
        return elsestatements != null && !elsestatements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ParallelStatementImpl
