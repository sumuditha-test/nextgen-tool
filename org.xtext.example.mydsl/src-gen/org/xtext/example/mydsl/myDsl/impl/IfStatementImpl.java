/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.IfStatement;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.IfStatementImpl#getRouteId <em>Route Id</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.IfStatementImpl#getTransport <em>Transport</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.IfStatementImpl#getPattern <em>Pattern</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.IfStatementImpl#getAltstatements <em>Altstatements</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.IfStatementImpl#getElsestatements <em>Elsestatements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfStatementImpl extends StatementImpl implements IfStatement
{
  /**
   * The default value of the '{@link #getRouteId() <em>Route Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRouteId()
   * @generated
   * @ordered
   */
  protected static final String ROUTE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRouteId() <em>Route Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRouteId()
   * @generated
   * @ordered
   */
  protected String routeId = ROUTE_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getTransport() <em>Transport</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransport()
   * @generated
   * @ordered
   */
  protected static final String TRANSPORT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTransport() <em>Transport</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransport()
   * @generated
   * @ordered
   */
  protected String transport = TRANSPORT_EDEFAULT;

  /**
   * The default value of the '{@link #getPattern() <em>Pattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected static final String PATTERN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPattern() <em>Pattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPattern()
   * @generated
   * @ordered
   */
  protected String pattern = PATTERN_EDEFAULT;

  /**
   * The cached value of the '{@link #getAltstatements() <em>Altstatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAltstatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> altstatements;

  /**
   * The cached value of the '{@link #getElsestatements() <em>Elsestatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElsestatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> elsestatements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.IF_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getRouteId()
  {
    return routeId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRouteId(String newRouteId)
  {
    String oldRouteId = routeId;
    routeId = newRouteId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IF_STATEMENT__ROUTE_ID, oldRouteId, routeId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTransport()
  {
    return transport;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransport(String newTransport)
  {
    String oldTransport = transport;
    transport = newTransport;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IF_STATEMENT__TRANSPORT, oldTransport, transport));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPattern()
  {
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPattern(String newPattern)
  {
    String oldPattern = pattern;
    pattern = newPattern;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.IF_STATEMENT__PATTERN, oldPattern, pattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getAltstatements()
  {
    if (altstatements == null)
    {
      altstatements = new EObjectContainmentEList<Statement>(Statement.class, this, MyDslPackage.IF_STATEMENT__ALTSTATEMENTS);
    }
    return altstatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getElsestatements()
  {
    if (elsestatements == null)
    {
      elsestatements = new EObjectContainmentEList<Statement>(Statement.class, this, MyDslPackage.IF_STATEMENT__ELSESTATEMENTS);
    }
    return elsestatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.IF_STATEMENT__ALTSTATEMENTS:
        return ((InternalEList<?>)getAltstatements()).basicRemove(otherEnd, msgs);
      case MyDslPackage.IF_STATEMENT__ELSESTATEMENTS:
        return ((InternalEList<?>)getElsestatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.IF_STATEMENT__ROUTE_ID:
        return getRouteId();
      case MyDslPackage.IF_STATEMENT__TRANSPORT:
        return getTransport();
      case MyDslPackage.IF_STATEMENT__PATTERN:
        return getPattern();
      case MyDslPackage.IF_STATEMENT__ALTSTATEMENTS:
        return getAltstatements();
      case MyDslPackage.IF_STATEMENT__ELSESTATEMENTS:
        return getElsestatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.IF_STATEMENT__ROUTE_ID:
        setRouteId((String)newValue);
        return;
      case MyDslPackage.IF_STATEMENT__TRANSPORT:
        setTransport((String)newValue);
        return;
      case MyDslPackage.IF_STATEMENT__PATTERN:
        setPattern((String)newValue);
        return;
      case MyDslPackage.IF_STATEMENT__ALTSTATEMENTS:
        getAltstatements().clear();
        getAltstatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case MyDslPackage.IF_STATEMENT__ELSESTATEMENTS:
        getElsestatements().clear();
        getElsestatements().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IF_STATEMENT__ROUTE_ID:
        setRouteId(ROUTE_ID_EDEFAULT);
        return;
      case MyDslPackage.IF_STATEMENT__TRANSPORT:
        setTransport(TRANSPORT_EDEFAULT);
        return;
      case MyDslPackage.IF_STATEMENT__PATTERN:
        setPattern(PATTERN_EDEFAULT);
        return;
      case MyDslPackage.IF_STATEMENT__ALTSTATEMENTS:
        getAltstatements().clear();
        return;
      case MyDslPackage.IF_STATEMENT__ELSESTATEMENTS:
        getElsestatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.IF_STATEMENT__ROUTE_ID:
        return ROUTE_ID_EDEFAULT == null ? routeId != null : !ROUTE_ID_EDEFAULT.equals(routeId);
      case MyDslPackage.IF_STATEMENT__TRANSPORT:
        return TRANSPORT_EDEFAULT == null ? transport != null : !TRANSPORT_EDEFAULT.equals(transport);
      case MyDslPackage.IF_STATEMENT__PATTERN:
        return PATTERN_EDEFAULT == null ? pattern != null : !PATTERN_EDEFAULT.equals(pattern);
      case MyDslPackage.IF_STATEMENT__ALTSTATEMENTS:
        return altstatements != null && !altstatements.isEmpty();
      case MyDslPackage.IF_STATEMENT__ELSESTATEMENTS:
        return elsestatements != null && !elsestatements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (routeId: ");
    result.append(routeId);
    result.append(", transport: ");
    result.append(transport);
    result.append(", pattern: ");
    result.append(pattern);
    result.append(')');
    return result.toString();
  }

} //IfStatementImpl
