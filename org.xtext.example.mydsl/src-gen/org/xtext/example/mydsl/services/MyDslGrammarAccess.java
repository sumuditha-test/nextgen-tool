/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cParticipantsAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cParticipantsParticipantStatementParserRuleCall_0_0 = (RuleCall)cParticipantsAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Model:
		//	participants+=ParticipantStatement* & statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//participants+=ParticipantStatement* & statements+=Statement*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//participants+=ParticipantStatement*
		public Assignment getParticipantsAssignment_0() { return cParticipantsAssignment_0; }
		
		//ParticipantStatement
		public RuleCall getParticipantsParticipantStatementParserRuleCall_0_0() { return cParticipantsParticipantStatementParserRuleCall_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMediatorStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoutingStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParallelStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLoopStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRefStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Statement:
		//	MediatorStatement
		//	| RoutingStatement
		//	| ParallelStatement
		//	| IfStatement
		//	| LoopStatement
		//	| GroupStatement
		//	| RefStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//MediatorStatement | RoutingStatement | ParallelStatement | IfStatement | LoopStatement | GroupStatement | RefStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MediatorStatement
		public RuleCall getMediatorStatementParserRuleCall_0() { return cMediatorStatementParserRuleCall_0; }
		
		//RoutingStatement
		public RuleCall getRoutingStatementParserRuleCall_1() { return cRoutingStatementParserRuleCall_1; }
		
		//ParallelStatement
		public RuleCall getParallelStatementParserRuleCall_2() { return cParallelStatementParserRuleCall_2; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_3() { return cIfStatementParserRuleCall_3; }
		
		//LoopStatement
		public RuleCall getLoopStatementParserRuleCall_4() { return cLoopStatementParserRuleCall_4; }
		
		//GroupStatement
		public RuleCall getGroupStatementParserRuleCall_5() { return cGroupStatementParserRuleCall_5; }
		
		//RefStatement
		public RuleCall getRefStatementParserRuleCall_6() { return cRefStatementParserRuleCall_6; }
	}
	public class MediatorStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MediatorStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMediatorStatementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMediatorStatementMediatorTypeEnumRuleCall_0_0 = (RuleCall)cMediatorStatementAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConfigAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfigSTRINGTerminalRuleCall_2_0 = (RuleCall)cConfigAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MediatorStatement:
		//	mediatorStatement=MediatorType '(' config=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//mediatorStatement=MediatorType '(' config=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//mediatorStatement=MediatorType
		public Assignment getMediatorStatementAssignment_0() { return cMediatorStatementAssignment_0; }
		
		//MediatorType
		public RuleCall getMediatorStatementMediatorTypeEnumRuleCall_0_0() { return cMediatorStatementMediatorTypeEnumRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//config=STRING
		public Assignment getConfigAssignment_2() { return cConfigAssignment_2; }
		
		//STRING
		public RuleCall getConfigSTRINGTerminalRuleCall_2_0() { return cConfigSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ProcessingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ProcessingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessage_processorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cConfigsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cConfigsSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cConfigsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		
		//ProcessingStatement:
		//	'message_processor' '(' name=ID (')' | ',' configs=STRING ')');
		@Override public ParserRule getRule() { return rule; }
		
		//'message_processor' '(' name=ID (')' | ',' configs=STRING ')')
		public Group getGroup() { return cGroup; }
		
		//'message_processor'
		public Keyword getMessage_processorKeyword_0() { return cMessage_processorKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(')' | ',' configs=STRING ')')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_0() { return cRightParenthesisKeyword_3_0; }
		
		//',' configs=STRING ')'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//configs=STRING
		public Assignment getConfigsAssignment_3_1_1() { return cConfigsAssignment_3_1_1; }
		
		//STRING
		public RuleCall getConfigsSTRINGTerminalRuleCall_3_1_1_0() { return cConfigsSTRINGTerminalRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_1_2() { return cRightParenthesisKeyword_3_1_2; }
	}
	public class RoutingStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RoutingStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceIDTerminalRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetIDTerminalRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cActionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActionSTRINGTerminalRuleCall_4_0 = (RuleCall)cActionAssignment_4.eContents().get(0);
		
		//RoutingStatement:
		//	source=ID '->' target=ID ':' action=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//source=ID '->' target=ID ':' action=STRING
		public Group getGroup() { return cGroup; }
		
		//source=ID
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//ID
		public RuleCall getSourceIDTerminalRuleCall_0_0() { return cSourceIDTerminalRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//target=ID
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//ID
		public RuleCall getTargetIDTerminalRuleCall_2_0() { return cTargetIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//action=STRING
		public Assignment getActionAssignment_4() { return cActionAssignment_4; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_4_0() { return cActionSTRINGTerminalRuleCall_4_0; }
	}
	public class ParallelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParallelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParstatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParstatementsStatementParserRuleCall_1_0 = (RuleCall)cParstatementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElsestatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElsestatementsStatementParserRuleCall_2_1_0 = (RuleCall)cElsestatementsAssignment_2_1.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParallelStatement:
		//	'par'
		//	parstatements+=Statement* ('else' elsestatements+=Statement*)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'par' parstatements+=Statement* ('else' elsestatements+=Statement*)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'par'
		public Keyword getParKeyword_0() { return cParKeyword_0; }
		
		//parstatements+=Statement*
		public Assignment getParstatementsAssignment_1() { return cParstatementsAssignment_1; }
		
		//Statement
		public RuleCall getParstatementsStatementParserRuleCall_1_0() { return cParstatementsStatementParserRuleCall_1_0; }
		
		//('else' elsestatements+=Statement*)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'else'
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }
		
		//elsestatements+=Statement*
		public Assignment getElsestatementsAssignment_2_1() { return cElsestatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getElsestatementsStatementParserRuleCall_2_1_0() { return cElsestatementsStatementParserRuleCall_2_1_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConditionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRouteIdAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRouteIdSTRINGTerminalRuleCall_5_0 = (RuleCall)cRouteIdAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTransportAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTransportSTRINGTerminalRuleCall_7_0 = (RuleCall)cTransportAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cPatternKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cPatternAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPatternSTRINGTerminalRuleCall_12_0 = (RuleCall)cPatternAssignment_12.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cAltstatementsAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cAltstatementsStatementParserRuleCall_15_0 = (RuleCall)cAltstatementsAssignment_15.eContents().get(0);
		private final Group cGroup_16 = (Group)cGroup.eContents().get(16);
		private final Keyword cElseKeyword_16_0 = (Keyword)cGroup_16.eContents().get(0);
		private final Assignment cElsestatementsAssignment_16_1 = (Assignment)cGroup_16.eContents().get(1);
		private final RuleCall cElsestatementsStatementParserRuleCall_16_1_0 = (RuleCall)cElsestatementsAssignment_16_1.eContents().get(0);
		private final Keyword cEndKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//IfStatement:
		//	'alt' 'condition' '(' 'source' '(' routeId=STRING ',' transport=STRING ')' ',' 'pattern' '(' pattern=STRING ')' ')'
		//	altstatements+=Statement* ('else' elsestatements+=Statement*)*
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'alt' 'condition' '(' 'source' '(' routeId=STRING ',' transport=STRING ')' ',' 'pattern' '(' pattern=STRING ')' ')'
		//altstatements+=Statement* ('else' elsestatements+=Statement*)* 'end'
		public Group getGroup() { return cGroup; }
		
		//'alt'
		public Keyword getAltKeyword_0() { return cAltKeyword_0; }
		
		//'condition'
		public Keyword getConditionKeyword_1() { return cConditionKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'source'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//routeId=STRING
		public Assignment getRouteIdAssignment_5() { return cRouteIdAssignment_5; }
		
		//STRING
		public RuleCall getRouteIdSTRINGTerminalRuleCall_5_0() { return cRouteIdSTRINGTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//transport=STRING
		public Assignment getTransportAssignment_7() { return cTransportAssignment_7; }
		
		//STRING
		public RuleCall getTransportSTRINGTerminalRuleCall_7_0() { return cTransportSTRINGTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//'pattern'
		public Keyword getPatternKeyword_10() { return cPatternKeyword_10; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11() { return cLeftParenthesisKeyword_11; }
		
		//pattern=STRING
		public Assignment getPatternAssignment_12() { return cPatternAssignment_12; }
		
		//STRING
		public RuleCall getPatternSTRINGTerminalRuleCall_12_0() { return cPatternSTRINGTerminalRuleCall_12_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
		
		//altstatements+=Statement*
		public Assignment getAltstatementsAssignment_15() { return cAltstatementsAssignment_15; }
		
		//Statement
		public RuleCall getAltstatementsStatementParserRuleCall_15_0() { return cAltstatementsStatementParserRuleCall_15_0; }
		
		//('else' elsestatements+=Statement*)*
		public Group getGroup_16() { return cGroup_16; }
		
		//'else'
		public Keyword getElseKeyword_16_0() { return cElseKeyword_16_0; }
		
		//elsestatements+=Statement*
		public Assignment getElsestatementsAssignment_16_1() { return cElsestatementsAssignment_16_1; }
		
		//Statement
		public RuleCall getElsestatementsStatementParserRuleCall_16_1_0() { return cElsestatementsStatementParserRuleCall_16_1_0; }
		
		//'end'
		public Keyword getEndKeyword_17() { return cEndKeyword_17; }
	}
	public class LoopStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.LoopStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//LoopStatement: //TODO : not implemented
		//	'loop' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO : not implemented
		//'loop' name=ID
		public Group getGroup() { return cGroup; }
		
		////TODO : not implemented
		//'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GroupStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GroupStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GroupStatement: //TODO : not implemented
		//	'group' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO : not implemented
		//'group' name=ID
		public Group getGroup() { return cGroup; }
		
		////TODO : not implemented
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RefStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.RefStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RefStatement: //TODO : not implemented
		//	'ref' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		////TODO : not implemented
		//'ref' name=ID
		public Group getGroup() { return cGroup; }
		
		////TODO : not implemented
		//'ref'
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ParticipantStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParticipantStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cParticipantKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cParticipantTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cParticipantTypeParticipantTypeEnumRuleCall_0_3_0 = (RuleCall)cParticipantTypeAssignment_0_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cDescriptionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_0_5_0 = (RuleCall)cDescriptionAssignment_0_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cParticipantKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cOutboundsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOutboundsOutboundEndpointDefParserRuleCall_1_3_0 = (RuleCall)cOutboundsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cParticipantKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cInboundsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cInboundsInboundEndpointDefParserRuleCall_2_3_0 = (RuleCall)cInboundsAssignment_2_3.eContents().get(0);
		
		//ParticipantStatement:
		//	'participant' name=ID ':' participantType=ParticipantType '(' description=STRING ')'
		//	| 'participant' name=ID ':' outbounds=OutboundEndpointDef
		//	| 'participant' name=ID ':' inbounds=InboundEndpointDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'participant' name=ID ':' participantType=ParticipantType '(' description=STRING ')' | 'participant' name=ID ':'
		//outbounds=OutboundEndpointDef | 'participant' name=ID ':' inbounds=InboundEndpointDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'participant' name=ID ':' participantType=ParticipantType '(' description=STRING ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'participant'
		public Keyword getParticipantKeyword_0_0() { return cParticipantKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//participantType=ParticipantType
		public Assignment getParticipantTypeAssignment_0_3() { return cParticipantTypeAssignment_0_3; }
		
		//ParticipantType
		public RuleCall getParticipantTypeParticipantTypeEnumRuleCall_0_3_0() { return cParticipantTypeParticipantTypeEnumRuleCall_0_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_4() { return cLeftParenthesisKeyword_0_4; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_0_5() { return cDescriptionAssignment_0_5; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_0_5_0() { return cDescriptionSTRINGTerminalRuleCall_0_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//'participant' name=ID ':' outbounds=OutboundEndpointDef
		public Group getGroup_1() { return cGroup_1; }
		
		//'participant'
		public Keyword getParticipantKeyword_1_0() { return cParticipantKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//outbounds=OutboundEndpointDef
		public Assignment getOutboundsAssignment_1_3() { return cOutboundsAssignment_1_3; }
		
		//OutboundEndpointDef
		public RuleCall getOutboundsOutboundEndpointDefParserRuleCall_1_3_0() { return cOutboundsOutboundEndpointDefParserRuleCall_1_3_0; }
		
		//'participant' name=ID ':' inbounds=InboundEndpointDef
		public Group getGroup_2() { return cGroup_2; }
		
		//'participant'
		public Keyword getParticipantKeyword_2_0() { return cParticipantKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//inbounds=InboundEndpointDef
		public Assignment getInboundsAssignment_2_3() { return cInboundsAssignment_2_3; }
		
		//InboundEndpointDef
		public RuleCall getInboundsInboundEndpointDefParserRuleCall_2_3_0() { return cInboundsInboundEndpointDefParserRuleCall_2_3_0; }
	}
	public class OutboundEndpointDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.OutboundEndpointDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutboundEndpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProtocolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_4_0 = (RuleCall)cProtocolAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cHostKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cHostAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHostSTRINGTerminalRuleCall_9_0 = (RuleCall)cHostAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//OutboundEndpointDef:
		//	'OutboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'host' '(' host=STRING ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'OutboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'host' '(' host=STRING ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'OutboundEndpoint'
		public Keyword getOutboundEndpointKeyword_0() { return cOutboundEndpointKeyword_0; }
		
		//'('+
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'protocol'
		public Keyword getProtocolKeyword_2() { return cProtocolKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_4() { return cProtocolAssignment_4; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_4_0() { return cProtocolSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'host'
		public Keyword getHostKeyword_7() { return cHostKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//host=STRING
		public Assignment getHostAssignment_9() { return cHostAssignment_9; }
		
		//STRING
		public RuleCall getHostSTRINGTerminalRuleCall_9_0() { return cHostSTRINGTerminalRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class InboundEndpointDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.InboundEndpointDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInboundEndpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cProtocolKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtocolSTRINGTerminalRuleCall_4_0 = (RuleCall)cProtocolAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cPortKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPortINTTerminalRuleCall_9_0 = (RuleCall)cPortAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cContextKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cLeftParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cContextAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cContextSTRINGTerminalRuleCall_14_0 = (RuleCall)cContextAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightParenthesisKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//InboundEndpointDef:
		//	'InboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'port' '(' port=INT ')' ',' 'context' '(' context=STRING
		//	')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'InboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'port' '(' port=INT ')' ',' 'context' '(' context=STRING
		//')' ')'
		public Group getGroup() { return cGroup; }
		
		//'InboundEndpoint'
		public Keyword getInboundEndpointKeyword_0() { return cInboundEndpointKeyword_0; }
		
		//'('+
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'protocol'
		public Keyword getProtocolKeyword_2() { return cProtocolKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//protocol=STRING
		public Assignment getProtocolAssignment_4() { return cProtocolAssignment_4; }
		
		//STRING
		public RuleCall getProtocolSTRINGTerminalRuleCall_4_0() { return cProtocolSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//'port'
		public Keyword getPortKeyword_7() { return cPortKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//port=INT
		public Assignment getPortAssignment_9() { return cPortAssignment_9; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_9_0() { return cPortINTTerminalRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//'context'
		public Keyword getContextKeyword_12() { return cContextKeyword_12; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13() { return cLeftParenthesisKeyword_13; }
		
		//context=STRING
		public Assignment getContextAssignment_14() { return cContextAssignment_14; }
		
		//STRING
		public RuleCall getContextSTRINGTerminalRuleCall_14_0() { return cContextSTRINGTerminalRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16() { return cRightParenthesisKeyword_16; }
	}
	
	public class ParticipantTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ParticipantType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEGRATIONFLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTEGRATIONFLOWIntegrationFlowKeyword_0_0 = (Keyword)cINTEGRATIONFLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINBOUNDENDPOINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINBOUNDENDPOINTInboundEndpointKeyword_1_0 = (Keyword)cINBOUNDENDPOINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOUTBOUNDENDPOINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOUTBOUNDENDPOINTOutboundEndpointKeyword_2_0 = (Keyword)cOUTBOUNDENDPOINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPIPELINEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPIPELINEPipelineKeyword_3_0 = (Keyword)cPIPELINEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ParticipantType:
		//	INTEGRATIONFLOW='IntegrationFlow'
		//	| INBOUNDENDPOINT='InboundEndpoint'
		//	| OUTBOUNDENDPOINT='OutboundEndpoint'
		//	| PIPELINE='Pipeline';
		public EnumRule getRule() { return rule; }
		
		//INTEGRATIONFLOW='IntegrationFlow' | INBOUNDENDPOINT='InboundEndpoint' | OUTBOUNDENDPOINT='OutboundEndpoint' |
		//PIPELINE='Pipeline'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGRATIONFLOW='IntegrationFlow'
		public EnumLiteralDeclaration getINTEGRATIONFLOWEnumLiteralDeclaration_0() { return cINTEGRATIONFLOWEnumLiteralDeclaration_0; }
		
		//'IntegrationFlow'
		public Keyword getINTEGRATIONFLOWIntegrationFlowKeyword_0_0() { return cINTEGRATIONFLOWIntegrationFlowKeyword_0_0; }
		
		//INBOUNDENDPOINT='InboundEndpoint'
		public EnumLiteralDeclaration getINBOUNDENDPOINTEnumLiteralDeclaration_1() { return cINBOUNDENDPOINTEnumLiteralDeclaration_1; }
		
		//'InboundEndpoint'
		public Keyword getINBOUNDENDPOINTInboundEndpointKeyword_1_0() { return cINBOUNDENDPOINTInboundEndpointKeyword_1_0; }
		
		//OUTBOUNDENDPOINT='OutboundEndpoint'
		public EnumLiteralDeclaration getOUTBOUNDENDPOINTEnumLiteralDeclaration_2() { return cOUTBOUNDENDPOINTEnumLiteralDeclaration_2; }
		
		//'OutboundEndpoint'
		public Keyword getOUTBOUNDENDPOINTOutboundEndpointKeyword_2_0() { return cOUTBOUNDENDPOINTOutboundEndpointKeyword_2_0; }
		
		//PIPELINE='Pipeline'
		public EnumLiteralDeclaration getPIPELINEEnumLiteralDeclaration_3() { return cPIPELINEEnumLiteralDeclaration_3; }
		
		//'Pipeline'
		public Keyword getPIPELINEPipelineKeyword_3_0() { return cPIPELINEPipelineKeyword_3_0; }
	}
	public class MediatorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.MediatorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLOGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLOGLogKeyword_0_0 = (Keyword)cLOGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCALLCallKeyword_1_0 = (Keyword)cCALLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRESPONDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRESPONDRespondKeyword_2_0 = (Keyword)cRESPONDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFILTEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFILTERFilterKeyword_3_0 = (Keyword)cFILTEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTRANSFORMEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTRANSFORMTransformKeyword_4_0 = (Keyword)cTRANSFORMEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cENRICHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cENRICHEnrichKeyword_5_0 = (Keyword)cENRICHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNALEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEXTERNALExternalKeyword_6_0 = (Keyword)cEXTERNALEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum MediatorType:
		//	LOG='log'
		//	| CALL='call'
		//	| RESPOND='respond'
		//	| FILTER='filter'
		//	| TRANSFORM='transform'
		//	| ENRICH='enrich'
		//	| EXTERNAL='external';
		public EnumRule getRule() { return rule; }
		
		//LOG='log' | CALL='call' | RESPOND='respond' | FILTER='filter' | TRANSFORM='transform' | ENRICH='enrich' |
		//EXTERNAL='external'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LOG='log'
		public EnumLiteralDeclaration getLOGEnumLiteralDeclaration_0() { return cLOGEnumLiteralDeclaration_0; }
		
		//'log'
		public Keyword getLOGLogKeyword_0_0() { return cLOGLogKeyword_0_0; }
		
		//CALL='call'
		public EnumLiteralDeclaration getCALLEnumLiteralDeclaration_1() { return cCALLEnumLiteralDeclaration_1; }
		
		//'call'
		public Keyword getCALLCallKeyword_1_0() { return cCALLCallKeyword_1_0; }
		
		//RESPOND='respond'
		public EnumLiteralDeclaration getRESPONDEnumLiteralDeclaration_2() { return cRESPONDEnumLiteralDeclaration_2; }
		
		//'respond'
		public Keyword getRESPONDRespondKeyword_2_0() { return cRESPONDRespondKeyword_2_0; }
		
		//FILTER='filter'
		public EnumLiteralDeclaration getFILTEREnumLiteralDeclaration_3() { return cFILTEREnumLiteralDeclaration_3; }
		
		//'filter'
		public Keyword getFILTERFilterKeyword_3_0() { return cFILTERFilterKeyword_3_0; }
		
		//TRANSFORM='transform'
		public EnumLiteralDeclaration getTRANSFORMEnumLiteralDeclaration_4() { return cTRANSFORMEnumLiteralDeclaration_4; }
		
		//'transform'
		public Keyword getTRANSFORMTransformKeyword_4_0() { return cTRANSFORMTransformKeyword_4_0; }
		
		//ENRICH='enrich'
		public EnumLiteralDeclaration getENRICHEnumLiteralDeclaration_5() { return cENRICHEnumLiteralDeclaration_5; }
		
		//'enrich'
		public Keyword getENRICHEnrichKeyword_5_0() { return cENRICHEnrichKeyword_5_0; }
		
		//EXTERNAL='external'
		public EnumLiteralDeclaration getEXTERNALEnumLiteralDeclaration_6() { return cEXTERNALEnumLiteralDeclaration_6; }
		
		//'external'
		public Keyword getEXTERNALExternalKeyword_6_0() { return cEXTERNALExternalKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final MediatorStatementElements pMediatorStatement;
	private final ProcessingStatementElements pProcessingStatement;
	private final RoutingStatementElements pRoutingStatement;
	private final ParallelStatementElements pParallelStatement;
	private final IfStatementElements pIfStatement;
	private final LoopStatementElements pLoopStatement;
	private final GroupStatementElements pGroupStatement;
	private final RefStatementElements pRefStatement;
	private final ParticipantStatementElements pParticipantStatement;
	private final OutboundEndpointDefElements pOutboundEndpointDef;
	private final InboundEndpointDefElements pInboundEndpointDef;
	private final ParticipantTypeElements eParticipantType;
	private final MediatorTypeElements eMediatorType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pMediatorStatement = new MediatorStatementElements();
		this.pProcessingStatement = new ProcessingStatementElements();
		this.pRoutingStatement = new RoutingStatementElements();
		this.pParallelStatement = new ParallelStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pLoopStatement = new LoopStatementElements();
		this.pGroupStatement = new GroupStatementElements();
		this.pRefStatement = new RefStatementElements();
		this.pParticipantStatement = new ParticipantStatementElements();
		this.pOutboundEndpointDef = new OutboundEndpointDefElements();
		this.pInboundEndpointDef = new InboundEndpointDefElements();
		this.eParticipantType = new ParticipantTypeElements();
		this.eMediatorType = new MediatorTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	participants+=ParticipantStatement* & statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	MediatorStatement
	//	| RoutingStatement
	//	| ParallelStatement
	//	| IfStatement
	//	| LoopStatement
	//	| GroupStatement
	//	| RefStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//MediatorStatement:
	//	mediatorStatement=MediatorType '(' config=STRING ')';
	public MediatorStatementElements getMediatorStatementAccess() {
		return pMediatorStatement;
	}
	
	public ParserRule getMediatorStatementRule() {
		return getMediatorStatementAccess().getRule();
	}
	
	//ProcessingStatement:
	//	'message_processor' '(' name=ID (')' | ',' configs=STRING ')');
	public ProcessingStatementElements getProcessingStatementAccess() {
		return pProcessingStatement;
	}
	
	public ParserRule getProcessingStatementRule() {
		return getProcessingStatementAccess().getRule();
	}
	
	//RoutingStatement:
	//	source=ID '->' target=ID ':' action=STRING;
	public RoutingStatementElements getRoutingStatementAccess() {
		return pRoutingStatement;
	}
	
	public ParserRule getRoutingStatementRule() {
		return getRoutingStatementAccess().getRule();
	}
	
	//ParallelStatement:
	//	'par'
	//	parstatements+=Statement* ('else' elsestatements+=Statement*)*
	//	'end';
	public ParallelStatementElements getParallelStatementAccess() {
		return pParallelStatement;
	}
	
	public ParserRule getParallelStatementRule() {
		return getParallelStatementAccess().getRule();
	}
	
	//IfStatement:
	//	'alt' 'condition' '(' 'source' '(' routeId=STRING ',' transport=STRING ')' ',' 'pattern' '(' pattern=STRING ')' ')'
	//	altstatements+=Statement* ('else' elsestatements+=Statement*)*
	//	'end';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//LoopStatement: //TODO : not implemented
	//	'loop' name=ID;
	public LoopStatementElements getLoopStatementAccess() {
		return pLoopStatement;
	}
	
	public ParserRule getLoopStatementRule() {
		return getLoopStatementAccess().getRule();
	}
	
	//GroupStatement: //TODO : not implemented
	//	'group' name=ID;
	public GroupStatementElements getGroupStatementAccess() {
		return pGroupStatement;
	}
	
	public ParserRule getGroupStatementRule() {
		return getGroupStatementAccess().getRule();
	}
	
	//RefStatement: //TODO : not implemented
	//	'ref' name=ID;
	public RefStatementElements getRefStatementAccess() {
		return pRefStatement;
	}
	
	public ParserRule getRefStatementRule() {
		return getRefStatementAccess().getRule();
	}
	
	//ParticipantStatement:
	//	'participant' name=ID ':' participantType=ParticipantType '(' description=STRING ')'
	//	| 'participant' name=ID ':' outbounds=OutboundEndpointDef
	//	| 'participant' name=ID ':' inbounds=InboundEndpointDef;
	public ParticipantStatementElements getParticipantStatementAccess() {
		return pParticipantStatement;
	}
	
	public ParserRule getParticipantStatementRule() {
		return getParticipantStatementAccess().getRule();
	}
	
	//OutboundEndpointDef:
	//	'OutboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'host' '(' host=STRING ')' ')';
	public OutboundEndpointDefElements getOutboundEndpointDefAccess() {
		return pOutboundEndpointDef;
	}
	
	public ParserRule getOutboundEndpointDefRule() {
		return getOutboundEndpointDefAccess().getRule();
	}
	
	//InboundEndpointDef:
	//	'InboundEndpoint' '('+ 'protocol' '(' protocol=STRING ')' ',' 'port' '(' port=INT ')' ',' 'context' '(' context=STRING
	//	')' ')';
	public InboundEndpointDefElements getInboundEndpointDefAccess() {
		return pInboundEndpointDef;
	}
	
	public ParserRule getInboundEndpointDefRule() {
		return getInboundEndpointDefAccess().getRule();
	}
	
	//enum ParticipantType:
	//	INTEGRATIONFLOW='IntegrationFlow'
	//	| INBOUNDENDPOINT='InboundEndpoint'
	//	| OUTBOUNDENDPOINT='OutboundEndpoint'
	//	| PIPELINE='Pipeline';
	public ParticipantTypeElements getParticipantTypeAccess() {
		return eParticipantType;
	}
	
	public EnumRule getParticipantTypeRule() {
		return getParticipantTypeAccess().getRule();
	}
	
	//enum MediatorType:
	//	LOG='log'
	//	| CALL='call'
	//	| RESPOND='respond'
	//	| FILTER='filter'
	//	| TRANSFORM='transform'
	//	| ENRICH='enrich'
	//	| EXTERNAL='external';
	public MediatorTypeElements getMediatorTypeAccess() {
		return eMediatorType;
	}
	
	public EnumRule getMediatorTypeRule() {
		return getMediatorTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
