/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_IfStatement_ElseKeyword_16_0_a;
	protected AbstractElementAlias match_IfStatement_ElseKeyword_16_0_p;
	protected AbstractElementAlias match_InboundEndpointDef_LeftParenthesisKeyword_1_p;
	protected AbstractElementAlias match_OutboundEndpointDef_LeftParenthesisKeyword_1_p;
	protected AbstractElementAlias match_ParallelStatement_ElseKeyword_2_0_a;
	protected AbstractElementAlias match_ParallelStatement_ElseKeyword_2_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_IfStatement_ElseKeyword_16_0_a = new TokenAlias(true, true, grammarAccess.getIfStatementAccess().getElseKeyword_16_0());
		match_IfStatement_ElseKeyword_16_0_p = new TokenAlias(true, false, grammarAccess.getIfStatementAccess().getElseKeyword_16_0());
		match_InboundEndpointDef_LeftParenthesisKeyword_1_p = new TokenAlias(true, false, grammarAccess.getInboundEndpointDefAccess().getLeftParenthesisKeyword_1());
		match_OutboundEndpointDef_LeftParenthesisKeyword_1_p = new TokenAlias(true, false, grammarAccess.getOutboundEndpointDefAccess().getLeftParenthesisKeyword_1());
		match_ParallelStatement_ElseKeyword_2_0_a = new TokenAlias(true, true, grammarAccess.getParallelStatementAccess().getElseKeyword_2_0());
		match_ParallelStatement_ElseKeyword_2_0_p = new TokenAlias(true, false, grammarAccess.getParallelStatementAccess().getElseKeyword_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_IfStatement_ElseKeyword_16_0_a.equals(syntax))
				emit_IfStatement_ElseKeyword_16_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_ElseKeyword_16_0_p.equals(syntax))
				emit_IfStatement_ElseKeyword_16_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InboundEndpointDef_LeftParenthesisKeyword_1_p.equals(syntax))
				emit_InboundEndpointDef_LeftParenthesisKeyword_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutboundEndpointDef_LeftParenthesisKeyword_1_p.equals(syntax))
				emit_OutboundEndpointDef_LeftParenthesisKeyword_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParallelStatement_ElseKeyword_2_0_a.equals(syntax))
				emit_ParallelStatement_ElseKeyword_2_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParallelStatement_ElseKeyword_2_0_p.equals(syntax))
				emit_ParallelStatement_ElseKeyword_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'else'*
	 *
	 * This ambiguous syntax occurs at:
	 *     altstatements+=Statement (ambiguity) 'end' (rule end)
	 *     elsestatements+=Statement (ambiguity) 'end' (rule end)
	 *     elsestatements+=Statement (ambiguity) elsestatements+=Statement
	 *     pattern=STRING ')' ')' (ambiguity) 'end' (rule end)
	 */
	protected void emit_IfStatement_ElseKeyword_16_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'+
	 *
	 * This ambiguous syntax occurs at:
	 *     altstatements+=Statement (ambiguity) elsestatements+=Statement
	 *     pattern=STRING ')' ')' (ambiguity) elsestatements+=Statement
	 */
	protected void emit_IfStatement_ElseKeyword_16_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'InboundEndpoint' (ambiguity) 'protocol' '(' protocol=STRING
	 */
	protected void emit_InboundEndpointDef_LeftParenthesisKeyword_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'OutboundEndpoint' (ambiguity) 'protocol' '(' protocol=STRING
	 */
	protected void emit_OutboundEndpointDef_LeftParenthesisKeyword_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'par' (ambiguity) 'end' (rule start)
	 *     elsestatements+=Statement (ambiguity) 'end' (rule end)
	 *     elsestatements+=Statement (ambiguity) elsestatements+=Statement
	 *     parstatements+=Statement (ambiguity) 'end' (rule end)
	 */
	protected void emit_ParallelStatement_ElseKeyword_2_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'par' (ambiguity) 'end' (rule start)
	 *     (rule start) 'par' (ambiguity) elsestatements+=Statement
	 *     parstatements+=Statement (ambiguity) elsestatements+=Statement
	 */
	protected void emit_ParallelStatement_ElseKeyword_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
